type: edu
custom_name: stage4
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |
    package blockchain;

    import java.security.MessageDigest;

    public class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

    }
  learner_created: true
- name: src/blockchain/ChainBlock.java
  visible: true
  text: |
    package blockchain;

    import java.util.Date;
    import java.util.List;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class ChainBlock {
        private int id;
        private long timestamp;
        private int magicNumber;
        private String hashPreviousBlock;
        private String hashBlock;
        private int genTime;
        private int countLeadingZeros;
        private int n;

        public ChainBlock(int id, long timestamp, String hashPreviousBlock, int countLeadingZeros, int n) {
            this.id = id;
            this.timestamp = timestamp;
            this.magicNumber = genMagicNumber(countLeadingZeros);
            this.hashPreviousBlock = hashPreviousBlock;
            this.magicNumber = this.genMagicNumber(countLeadingZeros);
            this.hashBlock = StringUtil.applySha256(new StringBuffer(id)
                    .append(timestamp)
                    .append(magicNumber)
                    .append(hashPreviousBlock).toString());
            this.countLeadingZeros = countLeadingZeros;
            this.n = n;
        }

        private int genMagicNumber(int zeros) {
            Random r = new Random();
            long startTimeStamp = new Date().getTime();
            StringBuffer leadingZeros = new StringBuffer();
            for (int i = 0; i < zeros; i++) {
                leadingZeros.append("0");
            }
            String regex = leadingZeros.toString() + ".*";
            Pattern pattern = Pattern.compile(regex);
            while (true) {
                int magicNumber = r.nextInt();
                String hash = StringUtil.applySha256(new StringBuffer(id)
                        .append(timestamp)
                        .append(magicNumber)
                        .append(hashPreviousBlock).toString());
                Matcher matcher = pattern.matcher(hash);
                if (matcher.matches()) {
                    this.genTime = (int) (new Date().getTime() - startTimeStamp) / 1000;
                    return magicNumber;
                }

            }
        }

        public int getGenTime() {
            return genTime;
        }

        public int getMagicNumber() {
            return magicNumber;
        }

        public int getId() {
            return id;
        }

        public long getTimestamp() {
            return timestamp;
        }

        public String getHashPreviousBlock() {
            return hashPreviousBlock;
        }

        public String getHashBlock() {
            return hashBlock != null ? hashBlock : "0";
        }

        public boolean checkBlock(ChainBlock block) {
            return StringUtil.applySha256(new StringBuffer(block.getId())
                    .append(block.getTimestamp())
                    .append(block.getMagicNumber())
                    .append(block.getHashPreviousBlock()).toString())
                    .equals(block.getHashBlock());

        }

        public static boolean checkBlockChain(List<ChainBlock> blockChain) {
            for (int i = 0; i < blockChain.size(); i++) {
                if (i == 0 && blockChain.get(i).getId() == 1 && !blockChain.get(i).getHashPreviousBlock().equals("0")) {
                    return false;
                }
                if (i > 0 && blockChain.get(i).getHashPreviousBlock() != blockChain.get(i - 1).getHashBlock()) {
                    return false;
                }
            }
            return true;
        }

        @Override
        public String toString() {
            final StringBuilder sb = new StringBuilder("Block:");
            sb.append("\nCreated by miner # 7");
            sb.append("\nId: ").append(id);
            sb.append("\nTimestamp: ").append(timestamp);
            sb.append("\nMagic number: ").append(magicNumber);
            sb.append("\nHash of the previous block: \n").append(hashPreviousBlock);
            sb.append("\nHash of the block: \n").append(hashBlock);
            sb.append("\nBlock was generating for: ").append(genTime).append(" seconds");
            if (n > 0) {
                sb.append("\nN was increased to ").append(countLeadingZeros + 1).append("\n");
            } else if (n < 0) {
                sb.append("\nN was decreased by ").append(Math.abs(n)).append("\n");
            } else {
                sb.append("\nN stays the same\n");
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/blockchain/Message.java
  visible: true
  learner_created: true
- name: src/blockchain/MinerThread.java
  visible: true
  learner_created: true
- name: src/blockchain/AsyncMessageSender.java
  visible: true
  learner_created: true
- name: src/blockchain/AsyncMessageSenderImpl.java
  visible: true
  learner_created: true
- name: src/blockchain/MessageSender.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/274/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/50/stages/274/implement">JetBrains
    Academy</a>
  time: Sun, 25 Oct 2020 21:26:11 UTC
record: 4
